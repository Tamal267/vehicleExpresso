CREATE TABLE USERS(
    USERID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1),
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(100) NOT NULL,
    COUNTRY VARCHAR2(100),
    CITY VARCHAR2(100),
    AREA VARCHAR2(100),
    LONGITUDE NUMBER(12, 8),
    LATITUDE NUMBER(12, 8),
    PHONE VARCHAR2(20),
    PRO_URL VARCHAR(100),
    CONSTRAINT PK_USERS PRIMARY KEY (USERID)
);

CREATE TABLE GARAGE(
    GARAGEID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
    OWNERID INTEGER NOT NULL,
    COUNTRY VARCHAR2(30) NOT NULL,
    CITY VARCHAR2(30) NOT NULL,
    AREA VARCHAR2(30) NOT NULL,
    NAME VARCHAR2(100) NOT NULL,
    LONGITUDE NUMBER(12, 8) NOT NULL,
    LATITUDE NUMBER(12, 8) NOT NULL,
    STATUS INTEGER NOT NULL,
    CONSTRAINT PK_GARAGE PRIMARY KEY (GARAGEID),
    CONSTRAINT FK_OWNER FOREIGN KEY (OWNERID) REFERENCES USERS(USERID),
    CONSTRAINT UNQ_GARAGE_INFO UNIQUE (COUNTRY, CITY, AREA, NAME)
);

CREATE TABLE RENT_INFO(
    GARAGEID INTEGER NOT NULL,
    VEHICLETYPE VARCHAR2(100) NOT NULL,
    COSTLONG NUMBER(12, 4) DEFAULT 0,
    COSTSHORT NUMBER(12, 4) DEFAULT 0,
    LEFTLONG INTEGER DEFAULT 0,
    LEFTSHORT INTEGER DEFAULT 0,
    CONSTRAINT FK_GARAGEID FOREIGN KEY (GARAGEID) REFERENCES GARAGE(GARAGEID),
    CONSTRAINT UN_RENT_INFO UNIQUE(GARAGEID, VEHICLETYPE)
);

CREATE TABLE VEHICLE_INFO(
    VEHICLENO VARCHAR2(100) NOT NULL,
    VEHICLE_OWNER INTEGER NOT NULL,
    VEHICLETYPE VARCHAR2(100) NOT NULL,
    VEHICLE_MODEL VARCHAR2(100) NOT NULL,
    VEHICLE_COMPANY VARCHAR2(100) NOT NULL,
    VEHICLE_COLOR VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_VEHICLENO PRIMARY KEY (VEHICLENO),
    CONSTRAINT FK_VEHICLE_OWNER FOREIGN KEY (VEHICLE_OWNER) REFERENCES USERS(USERID)
);

CREATE TABLE HAS_PAYMENT(
    VEHICLENO VARCHAR2(100) NOT NULL,
    GARAGEID INTEGER NOT NULL,
    ST_DATE DATE NOT NULL,
    PAYMENT_AMOUNT NUMBER(12, 4) DEFAULT 0,
    SERVICETYPE VARCHAR2(100) DEFAULT 'SHORT',
    CONSTRAINT FK_VEHICLENO_HAS_PAYMENT FOREIGN KEY (VEHICLENO) REFERENCES VEHICLE_INFO(VEHICLENO),
    CONSTRAINT FK_GARAGEID_HAS_PAYMENT FOREIGN KEY (GARAGEID) REFERENCES GARAGE(GARAGEID),
    CONSTRAINT UNQ_HAS_PAYMENT UNIQUE(VEHICLENO)
);

CREATE TABLE TAKES_SERVICE(
    SERVICEID INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    GARAGEID INTEGER NOT NULL,
    VEHICLENO VARCHAR2(100) NOT NULL,
    SERVICETYPE VARCHAR2(100) NOT NULL,
    START_TIME DATE NOT NULL,
    END_TIME DATE NOT NULL,
    TOTAL_AMOUNT NUMBER(12, 4) NOT NULL,
    PAID NUMBER(12, 4) NOT NULL,
    CONSTRAINT PK_SERVICEID PRIMARY KEY (SERVICEID),
    CONSTRAINT FK_GARAGEID_TAKES_SERVICE FOREIGN KEY (GARAGEID) REFERENCES GARAGE(GARAGEID),
    CONSTRAINT FK_VEHICLENO_TAKES_SERVICE FOREIGN KEY (VEHICLENO) REFERENCES VEHICLE_INFO(VEHICLENO)
);

CREATE TABLE GARAGE_ADMIN_PAY(
    PAYID NUMBER(*, 0) GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    GARAGEID NUMBER(*, 0) NOT NULL,
    AMOUNT NUMBER(12, 4) DEFAULT 0,
    PAYMENT_TIME DATE DEFAULT CURRENT_TIMESTAMP,
    CUR_TIME DATE DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT PK_GARAGE_ADMIN_PAY PRIMARY KEY (PAYID),
    CONSTRAINT FK_GARAGEID_GARAGE_ADMIN_PAY FOREIGN KEY (GARAGEID) REFERENCES GARAGE(GARAGEID)
);

CREATE TABLE NOTICE(
    NOTICEID NUMBER(*, 0) GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    USERID NUMBER(*, 0) NOT NULL,
    MESSAGE VARCHAR2(4000 BYTE) NOT NULL,
    NOTICE_TIME DATE DEFAULT CURRENT_TIMESTAMP,
    IS_READ NUMBER(*, 0) DEFAULT 0,
    CONSTRAINT PK_NOTIY PRIMARY KEY (NOTICEID),
    CONSTRAINT FK_NOTIFY_USERID FOREIGN KEY (USERID) REFERENCES USERS(USERID)
)
 -- Procedures
CREATE OR REPLACE PROCEDURE INSERT_RENT_DATA(
    GID IN GARAGE.GARAGEID%TYPE
) AS BEGIN INSERT INTO RENT_INFO(
    GARAGEID,
    VEHICLETYPE
) VALUES (
    GID,
    'CAR'
);

INSERT INTO RENT_INFO(
    GARAGEID,
    VEHICLETYPE
) VALUES (
    GID,
    'JEEP'
);

INSERT INTO RENT_INFO(
    GARAGEID,
    VEHICLETYPE
) VALUES (
    GID,
    'BIKE'
);

INSERT INTO RENT_INFO(
    GARAGEID,
    VEHICLETYPE
) VALUES (
    GID,
    'MICRO'
);

END;

CREATE OR REPLACE PROCEDURE ENTRYVEHICLE(
    VNO IN VEHICLE_INFO.VEHICLENO%TYPE,
    GID IN GARAGE.GARAGEID%TYPE,
    PAMNT IN HAS_PAYMENT.PAYMENT_AMOUNT%TYPE,
    STYPE IN HAS_PAYMENT.SERVICETYPE%TYPE
) AS
BEGIN
    INSERT INTO HAS_PAYMENT VALUES(
        VNO,
        GID,
        CURRENT_TIMESTAMP,
        PAMNT,
        STYPE
    );
    UPDATE RENT_INFO
    SET
        LEFTLONG = LEFTLONG - (
            CASE WHEN STYPE='LONG' THEN 1 ELSE 0 END
        ),
        LEFTSHORT = LEFTSHORT - (
            CASE WHEN STYPE='SHORT' THEN 1 ELSE 0 END
        )
    WHERE
        GARAGEID=GID
        AND VEHICLETYPE = (
            SELECT
                VEHICLETYPE
            FROM
                VEHICLE_INFO
            WHERE
                VEHICLENO = VNO
        );
END;

CREATE OR REPLACE PROCEDURE EXITVEHICLE( VNO IN VEHICLE_INFO.VEHICLENO%TYPE, GID IN GARAGE.GARAGEID%TYPE, STYPE IN HAS_PAYMENT.SERVICETYPE%TYPE, TAMNT IN TAKES_SERVICE.TOTAL_AMOUNT%TYPE, PD IN TAKES_SERVICE.PAID%TYPE ) AS
    ST_TIME DATE;
BEGIN
    UPDATE RENT_INFO
    SET
        LEFTLONG = LEFTLONG + (
            CASE WHEN STYPE='LONG' THEN 1 ELSE 0 END
        ),
        LEFTSHORT = LEFTSHORT + (
            CASE WHEN STYPE='SHORT' THEN 1 ELSE 0 END
        )
    WHERE
        GARAGEID=GID
        AND VEHICLETYPE = (
            SELECT
                VEHICLETYPE
            FROM
                VEHICLE_INFO
            WHERE
                VEHICLENO = VNO
        );
    SELECT
        ST_DATE INTO ST_TIME
    FROM
        HAS_PAYMENT
    WHERE
        VEHICLENO=VNO
        AND GARAGEID=GID;
    INSERT INTO TAKES_SERVICE(
        GARAGEID,
        VEHICLENO,
        SERVICETYPE,
        START_TIME,
        END_TIME,
        TOTAL_AMOUNT,
        PAID
    ) VALUES (
        GID,
        VNO,
        STYPE,
        ST_TIME,
        CURRENT_TIMESTAMP,
        TAMNT,
        PD
    );
    DELETE FROM HAS_PAYMENT
    WHERE
        VEHICLENO=VNO
        AND GARAGEID=GID;
END;

CREATE OR REPLACE PROCEDURE NOTICE_PARK_FOR_DUE( G IN INTEGER, TK IN TAKES_SERVICE.PAID%TYPE, D IN NOTICE.MESSAGE%TYPE ) AS
    USID INTEGER;
BEGIN
    SELECT
        OWNERID INTO USID
    FROM
        GARAGE
    WHERE
        GARAGEID = G;
    INSERT INTO NOTICE (
        USERID,
        MESSAGE
    ) VALUES (
        USID,
        'You have to send '
        || TK
        || ' tk to admin for parking on '
        || D
    );
END;
 -- Functions
CREATE OR REPLACE TYPE PARK_VEHICLE_PRICE AS
    OBJECT ( GARAGEID INTEGER, OWNERID INTEGER, COUNTRY VARCHAR2(30), CITY VARCHAR2(30), AREA VARCHAR2(30), NAME VARCHAR2(100), LONGITUDE NUMBER(12, 8), LATITUDE NUMBER(12, 8), STATUS INTEGER, VEHICLETYPE VARCHAR2(20), COSTSHORT NUMBER(12, 4), COSTLONG NUMBER(12, 4), LEFTSHORT INTEGER, LEFTLONG INTEGER );
    CREATE OR REPLACE TYPE PARK_VEHICLE_PRICE_TABLE AS TABLE OF PARK_VEHICLE_PRICE;
    CREATE OR REPLACE

    FUNCTION SHOW_PARKS(
        VTYPE IN RENT_INFO.VEHICLETYPE%TYPE,
        PLON IN GARAGE.LONGITUDE%TYPE,
        PLAT IN GARAGE.LATITUDE%TYPE
    ) RETURN PARK_VEHICLE_PRICE_TABLE AS
        PARKS_ARRAY PARK_VEHICLE_PRICE_TABLE;
        CURSOR ALL_PARKS IS
        SELECT
            G.*,
            R.VEHICLETYPE,
            R.COSTSHORT,
            R.COSTLONG,
            R.LEFTSHORT,
            R.LEFTLONG
        FROM
            GARAGE    G
            JOIN RENT_INFO R
            ON G.GARAGEID = R.GARAGEID
        WHERE
            R.VEHICLETYPE=VTYPE
        ORDER BY
            ABS(G.LONGITUDE - PLON) + ABS(G.LATITUDE - PLAT) FETCH FIRST 20 ROWS ONLY;
    BEGIN
        PARKS_ARRAY := PARK_VEHICLE_PRICE_TABLE();
        FOR PARK_ROW IN ALL_PARKS LOOP
            PARKS_ARRAY.EXTEND;
            PARKS_ARRAY(PARKS_ARRAY.COUNT) := PARK_VEHICLE_PRICE( PARK_ROW.GARAGEID, PARK_ROW.OWNERID, PARK_ROW.COUNTRY, PARK_ROW.CITY, PARK_ROW.AREA, PARK_ROW.NAME, PARK_ROW.LONGITUDE, PARK_ROW.LATITUDE, PARK_ROW.STATUS, PARK_ROW.VEHICLETYPE, PARK_ROW.COSTSHORT, PARK_ROW.COSTLONG, PARK_ROW.LEFTSHORT, PARK_ROW.LEFTLONG );
        END LOOP;

        RETURN PARKS_ARRAY;
    END;
 -- Views
    CREATE OR REPLACE FORCE VIEW DUE_PAYMENT_TO_ADMIN_VIEW AS WITH GAP AS(
        SELECT
            GARAGEID,
            TO_CHAR(GARAGE_ADMIN_PAY.PAYMENT_TIME, 'dd Mon, yyyy') PAYMENT_TIME,
            SUM(AMOUNT)                                            AMOUNT
        FROM
            GARAGE_ADMIN_PAY
        GROUP BY
            GARAGEID,
            TO_CHAR(GARAGE_ADMIN_PAY.PAYMENT_TIME, 'dd Mon, yyyy')
    ), TS AS(
        SELECT
            GARAGEID,
            TO_CHAR(END_TIME, 'dd Mon, yyyy') PAY_DAY,
            ROUND(SUM(PAID) * .15, 0)         PAID
        FROM
            TAKES_SERVICE
        GROUP BY
            GARAGEID,
            TO_CHAR(END_TIME, 'dd Mon, yyyy')
    )
    SELECT
        TS.GARAGEID,
        TS.PAY_DAY,
        G.NAME,
        G.AREA,
        G.CITY,
        G.COUNTRY,
        TS.PAID                      TOTAL_AMOUNT,
        TS.PAID - NVL(GAP.AMOUNT, 0) TOTAL_DUE
    FROM
        TS
        LEFT JOIN GAP
        ON TS.GARAGEID = GAP.GARAGEID
        AND TS.PAY_DAY = GAP.PAYMENT_TIME
        JOIN GARAGE G
        ON TS.GARAGEID = G.GARAGEID
    WHERE
        TS.PAID - NVL(GAP.AMOUNT, 0) > 0
    ORDER BY
        TS.PAID - NVL(GAP.AMOUNT, 0) DESC;
    CREATE OR REPLACE FORCE VIEW GETALLPARKS AS
    SELECT
        "GARAGEID",
        "OWNERID",
        "COUNTRY",
        "CITY",
        "AREA",
        "NAME",
        "LONGITUDE",
        "LATITUDE",
        "STATUS"
    FROM
        GARAGE;
 -- Triggers
    CREATE OR REPLACE TRIGGER NOTIFY_PAY_TO_ADMIN BEFORE INSERT ON GARAGE_ADMIN_PAY FOR EACH ROW DECLARE USID INTEGER;
BEGIN
    SELECT
        OWNERID INTO USID
    FROM
        GARAGE
    WHERE
        GARAGEID = :NEW.GARAGEID;
    INSERT INTO NOTICE (
        USERID,
        MESSAGE
    ) VALUES (
        USID,
        'You sent '
        || :NEW.AMOUNT
        || ' tk to admin'
    );
END;

CREATE OR REPLACE TRIGGER NOTIFY_ENTRY_VEHICLE BEFORE INSERT ON HAS_PAYMENT FOR EACH ROW DECLARE USID INTEGER;
GNAME VARCHAR2(200);
VNAME VARCHAR2(200);
BEGIN
    SELECT
        VEHICLE_OWNER INTO USID
    FROM
        VEHICLE_INFO
    WHERE
        VEHICLENO = :NEW.VEHICLENO;
    SELECT
        VEHICLE_COMPANY
        || ' '
        || VEHICLE_MODEL
        || ' ('
        || VEHICLE_COLOR
        || ')' INTO VNAME
    FROM
        VEHICLE_INFO
    WHERE
        VEHICLENO = :NEW.VEHICLENO;
    SELECT
        NAME
        || ', '
        || AREA
        || ', '
        || CITY
        || ', '
        || COUNTRY INTO GNAME
    FROM
        GARAGE
    WHERE
        GARAGEID = :NEW.GARAGEID;
    INSERT INTO NOTICE (
        USERID,
        MESSAGE
    ) VALUES (
        USID,
        'Your vehicle '
        || VNAME
        || ' entered into ' 
        || GNAME
    );
END;

CREATE OR REPLACE TRIGGER NOTIFY_EXIT_VEHICLE BEFORE INSERT ON TAKES_SERVICE FOR EACH ROW DECLARE USID INTEGER;
GNAME VARCHAR2(200);
VNAME VARCHAR2(200);
BEGIN
    SELECT
        VEHICLE_OWNER INTO USID
    FROM
        VEHICLE_INFO
    WHERE
        VEHICLENO = :NEW.VEHICLENO;
    SELECT
        VEHICLE_COMPANY
        || ' '
        || VEHICLE_MODEL
        || ' ('
        || VEHICLE_COLOR
        || ')' INTO VNAME
    FROM
        VEHICLE_INFO
    WHERE
        VEHICLENO = :NEW.VEHICLENO;
    SELECT
        NAME
        || ', '
        || AREA
        || ', '
        || CITY
        || ', '
        || COUNTRY INTO GNAME
    FROM
        GARAGE
    WHERE
        GARAGEID = :NEW.GARAGEID;
    INSERT INTO NOTICE (
        USERID,
        MESSAGE
    ) VALUES (
        USID,
        'Your vehicle '
        || VNAME
        || ' exited from ' 
        || GNAME
    );
END;